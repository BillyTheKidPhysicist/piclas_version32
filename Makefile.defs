
#=================================================================================================================================#
# CONFIGURATION                                                                                                                   #
#=================================================================================================================================#
INIFILE=$(MAINDIR)ini/particles.ini
COMPILER=GNU_DEBUG
MACHINE=AUTO  # AUTO, CRAY, NEHALEM or leave empty

#=================================================================================================================================#
# INI-FILE PARSING                                                                                                                #
#=================================================================================================================================#
INIVARS = EQNSYS PARTICLES NODETYPE RIEMANN TIMEDISCMETHOD NELEMZ N MPI POIS OPTIMIZED

# Defaults
EQNSYS         = maxwell
PARTICLES      =
NODETYPE       = 1
TIMEDISCMETHOD = 2
RIEMANN        = 1
NELEMS         = NELEMZ
N              = N
MPI            = 
POIS           =
OPTIMIZED      =
BLAS_LAPACK    = T

# Filter rule
define PARSE
  ifneq ($(subst #$(1)=,,$(filter #$(1)=%,$(shell cat $(INIFILE)))),)
    $(1) = $(subst #$(1)=,,$(filter #$(1)=%,$(shell cat $(INIFILE))))
  endif
endef

$(foreach PARAM,$(INIVARS),$(eval $(call PARSE,$(PARAM))))

ifeq ($(EQNSYS),maxwell)
  NVAR = 8
endif
ifeq ($(EQNSYS),maxwell_pois)
  NVAR = 8
  POIS = T
endif
ifeq ($(EQNSYS),electrostatic)
  NVAR = 4
endif
ifeq ($(EQNSYS),electrostatic_pois)
  NVAR = 4
  POIS = T
endif
#=================================================================================================================================#
# GET MACHINE ENVIRONMENT AND SET FILESYSTEM
#=================================================================================================================================#
ifeq ($(findstring AUTO,$(MACHINE)),AUTO)
  NODE = $(shell hostname)
  MACHINE=
  ifeq ($(findstring cl3fr,$(NODE)),cl3fr)
    MACHINE=NEHALEM
  endif
  ifeq ($(findstring eslogin,$(NODE)),eslogin)
    MACHINE=CRAY
  endif
  ifeq ($(findstring juqueen,$(NODE)),juqueen)
    MACHINE=BLUEGENE
  endif
endif

FILESYSTEM=
ifeq ($(findstring NEHALEM,$(MACHINE)),NEHALEM)
  FILESYSTEM=LUSTRE
endif
ifeq ($(findstring CRAY,$(MACHINE)),CRAY)
  FILESYSTEM=LUSTRE
endif
ifeq ($(findstring BLUEGENE,$(MACHINE)),BLUEGENE)
  FILESYSTEM=GPFS
endif

#=================================================================================================================================#
# PREPROCESSOR-DIRECTIVES                                                                                                         #
#=================================================================================================================================#
PREPROC  =-DPP_TimeDiscMethod=$(TIMEDISCMETHOD)
PREPROC +=-DPP_NodeType=$(NODETYPE)
PREPROC +=-DPP_Riemann=$(RIEMANN)
PREPROC +=-DPP_nVar=$(NVAR)
PREPROC +=-DPP_nElems=$(NELEMS)
PREPROC +=-DPP_N=$(N)
ifneq ($(PARTICLES),)
  PREPROC +=-DPARTICLES=$(PARTICLES)
endif
ifneq ($(FILESYSTEM),)
  PREPROC +=-D$(FILESYSTEM)
endif

# Cut compiler for use with DEBUG-flags
TMP=$(subst _, ,$(COMPILER))
SHARECOMP_MOD = $(word 1,$(TMP))
ifneq ($(MPI),)
  PREPROC +=-DMPI
  FC=$(FCM)
  CC=$(CCM)
  SHARECOMP_MOD+=-MPI
else
  FC=$(FCS)
  CC=$(CCS)
  SHARECOMP_MOD+=-SINGLE
endif
ifneq ($(OPTIMIZED),)
  ifneq ($(findstring DEBUG,$(COMPILER)),DEBUG) #don't set optimizations if in debug mode
    PREPROC +=-DOPTIMIZED=$(OPTIMIZED)
  endif
endif
ifneq ($(POIS),)
  PREPROC +=-DPP_POIS=$(POIS)
endif
empty:=
space:=$(empty) $(empty)
SHARECOMP=$(subst $(space),$(empty),$(SHARECOMP_MOD))

#=================================================================================================================================#
# LIBRARIES                                                                                                                       #
#=================================================================================================================================#

#---------------------------------------------------------------------------------------------------------------------------------#
# HDF5
#---------------------------------------------------------------------------------------------------------------------------------#
# Download and compile HDF5 libraries
ifeq ($(MACHINE),)
  HDF5_VERSION = 1.8.13
  ifneq ($(HDF5_VERSION),)
    HDF5_LIB = -L../share/$(SHARECOMP)/hdf5-$(HDF5_VERSION)/hdf5/lib
    HDF5_INC = -I../share/$(SHARECOMP)/hdf5-$(HDF5_VERSION)/hdf5/include
  endif
  HDF5_LIBS  = -lhdf5_fortran -lhdf5 -lz
endif

# BLUEGENE - Use available HDF5 libraries. Don't forget to load HDF5 module!
ifeq ($(findstring BLUEGENE,$(MACHINE)),BLUEGENE)
  # HDF5
  HDF5_INC      = -I/bgsys/local/hdf5/include
  HDF5_LIB      = -L/bgsys/local/hdf5/lib
  HDF5_LIBS     = -lhdf5_fortran -lhdf5  -lhdf5_hl -lhdf5hl_fortran

  SZ_INC        = -I/bgsys/local/szip/include -I/bgsys/local/zlib/include
  SZ_LIB        = -L/bgsys/local/szip/lib -L/bgsys/local/zlib/lib
  SZ_LIBS       = -lsz -lz
endif

# HLR_B - Use available HDF5 libraries. Don't forget to load HDF5 module!
ifeq ($(findstring HLRB,$(MACHINE)),HLRB)
  HDF5_LIB = -L$(HDF5_BASE)/lib
  #HDF5_INC is already available as environment variable!
  HDF5_LIBS    = -lhdf5_fortran -lhdf5 $(SZIP_LIB) -lz
endif

# HLR_S, Nehalem - Use available HDF5 libraries. Don't forget to load HDF5 module!
ifeq ($(findstring NEHALEM,$(MACHINE)),NEHALEM)
  HDF5_LIB  = -L/sw/laki/hlrs/tools/hdf5/1.8.6-openmpi-1.5.2-intel-12.0/lib
  HDF5_INC  = -I/sw/laki/hlrs/tools/hdf5/1.8.6-openmpi-1.5.2-intel-12.0/include
  HDF5_LIBS = -lhdf5_fortran -lhdf5 -lz
endif
  
# HLR_S, CRAY - Use available HDF5 libraries. Don't forget to load HDF5 module!
ifeq ($(findstring CRAY,$(MACHINE)),CRAY)
  HDF5_BASE = $(HDF5_DIR)
  HDF5_LIB  = -L$(HDF5_BASE)/lib/
  HDF5_INC  = -I$(HDF5_BASE)/include/
  HDF5_LIBS = -lhdf5_fortran -lhdf5 -lz
endif

# JAPAN, HELIOS - Use available HDF5 libraries. Don't forget to load HDF5 module!
ifeq ($(findstring HELIOS,$(MACHINE)),HELIOS)
  HDF5_BASE = $(HDF5_DIR)
  HDF5_LIB  = -L$(HDF5_BASE)/lib/
  HDF5_INC  = -I$(HDF5_BASE)/include/
  HDF5_LIBS = -lhdf5_fortran -lhdf5 -lz
endif

# HDF5 uses libdl
LIBDL = -ldl
#---------------------------------------------------------------------------------------------------------------------------------#

#---------------------------------------------------------------------------------------------------------------------------------#
# Tecplot Binary
#---------------------------------------------------------------------------------------------------------------------------------#
  TECLIB_VERSION = 12.0
  TECBIN_LIB = -L../share/$(SHARECOMP)/tecio-$(TECLIB_VERSION)
  TECBIN_LIBS = -ltecio -lstdc++
#---------------------------------------------------------------------------------------------------------------------------------#

#---------------------------------------------------------------------------------------------------------------------------------#
# Numerical Recipes
#---------------------------------------------------------------------------------------------------------------------------------#
  NR_LIB  = -L../lib
  NR_LIBS = -lrecipes
#---------------------------------------------------------------------------------------------------------------------------------#


#---------------------------------------------------------------------------------------------------------------------------------#
# BLAS / LAPACK 
#---------------------------------------------------------------------------------------------------------------------------------#
# all these setup options assume a pre-installed library
ifneq ($(BLAS_LAPACK),)
  ifeq ($(findstring MKL,$(BLAS_LAPACK)),MKL)
    BLAS_LAPACK_INC  = -mkl=sequential
    BLAS_LAPACK_LIB  =
    BLAS_LAPACK_LIBS = -mkl=sequential
  else
    BLAS_LAPACK_INC  =
    BLAS_LAPACK_LIB  = -L$(BLAS_LAPACK)
    BLAS_LAPACK_LIBS = -llapack -lblas
  endif
endif
#---------------------------------------------------------------------------------------------------------------------------------#


#=================================================================================================================================#
# COMPILER                                                                                                                        #
#=================================================================================================================================#

ENVIRONMENT=$(COMPILER) # specified at top of file
AR         =ar
AR_FLAGS   =clr

#---------------------------------------------------------------------------------------------------------------------------------#
# INTEL
#---------------------------------------------------------------------------------------------------------------------------------#
ifeq ($(findstring INTEL,$(ENVIRONMENT)),INTEL)
  FCS=ifort
  FCM=mpif90
  CCS=icc
  CCM=mpicc
  ifeq ($(findstring CRAY,$(MACHINE)),CRAY)
    FCM=ftn
    CCM=cc
  endif
  ifeq ($(findstring HELIOS,$(MACHINE)),HELIOS)
		# intel mpi
    #FCM=mpiifort
		FCM=mpif90
    CCM=cc
  endif
  AR =xiar # required for compilation using -ipo and -fast
  PREPROC +=-DINTEL

  FPRE     =-P
  PREOUT   =-o
  FCFLAGS  =-fpp -assume bscc -r8 -i4 -traceback -warn all # don't change
  FLFLAGS  =-r8 -i4 -traceback -assume bscc #-static # don't change
  F03STD   =-std03

  ifeq ($(findstring DEBUG,$(ENVIRONMENT)),DEBUG)
    FCFLAGS  +=-g -O0 -fpe0 -traceback \
               -check all,noarg_temp_created,noformat,nooutput_conversion,pointer,bounds,uninit
    FLFLAGS  +=-g -O0 
  else
    # -fast: -02(=general optlevel) -xhost(adapt to current system) -ipo(=interprocedural optimizations) 
    #        -static(=static linking) -no-prec-div(= A/B -> A*(1/B))
    FCFLAGS  +=-O2 -xhost -vec-report0 #-no-prec-div #-ipo -unroll-aggressive -p -pg  #IPO only on intel >12.0
    FLFLAGS  +=-O2 -xhost -vec-report0 #-no-prec-div #-ipo -unroll-aggressive -p -pg
  endif 

  ifeq ($(findstring OMP,$(ENVIRONMENT)),OMP)
    PREPROC += -DOMP
    FCFLAGS += -openmp
    OMP_LIB =  -openmp
  endif
endif

#---------------------------------------------------------------------------------------------------------------------------------#
# GNU
#---------------------------------------------------------------------------------------------------------------------------------#
ifeq ($(findstring GNU,$(ENVIRONMENT)),GNU)
  FCS=gfortran
  FCM=mpif90
  CCM=mpicc
  ifeq ($(findstring CRAY,$(MACHINE)),CRAY)
    FCM=ftn
    CCM=cc
  endif
  PREPROC +=-DGNU

  FPRE     = -cpp -E -w
  PREOUT   = >>
  FCFLAGS  = -xf95-cpp-input -cpp -fdefault-real-8 -fdefault-double-8 -fbackslash -DGNU # don't change
  FLFLAGS  = -fdefault-real-8 -fbackslash # don't change

  ifeq ($(findstring DEBUG,$(ENVIRONMENT)),DEBUG)
    FCFLAGS  += -g -O0 -ggdb3 -fbounds-check -finit-real=nan -fbacktrace
    FLFLAGS  += -g -O0 -ggdb3 -fbounds-check -finit-real=nan -fbacktrace
  else
	  # -03(=general optlevel) -march=native(adapt to current system) -flto(=interprocedural optimizations) 
    FCFLAGS  += -O3 -march=native
    FLFLAGS  += -O3 -march=native
  endif

  ifeq ($(findstring OMP,$(ENVIRONMENT)),OMP)
    PREPROC += -DOMP
    FCFLAGS += -fopenmp
    FLFLAGS += -fopenmp
  endif

  ifeq ($(findstring LLVM,$(ENVIRONMENT)),LLVM)
    FCFLAGS += -fplugin=dragonegg
    FLFLAGS += -fplugin=dragonegg
  endif

  ifeq ($(HOST),frbw)
    FCFLAGS += -I/opt/bwgrid/mpi/openmpi/1.3-gnu-4.1/include
  endif
endif

#---------------------------------------------------------------------------------------------------------------------------------#
# SX
#---------------------------------------------------------------------------------------------------------------------------------#
ifeq ($(findstring SX,$(ENVIRONMENT)),SX)
  FCS=sxf90
  FCM=sxmpif90
  CCM=sxmpicc
  PREPROC +=-DSX

  AR=sxar

  FCFLAGS  =-w -Wf,"-A idbl -init stack=nan heap=nan" -EP -R1 #-DSX -f2003 nocbind # don't change
  FLFLAGS  =-w -Wf,"-A idbl -init stack=nan heap=nan" -EP -R2 #     -f2003 nocbind # don't change
  RECIFLAGS=-w -Wf,"-A idbl -init stack=nan heap=nan" -EP -R2 #     -f2003 nocbind # don't change
  F03STD   =

  ifeq ($(findstring DEBUG,$(ENVIRONMENT)),DEBUG)
    FCFLAGS  +=-C debug -g 
    FLFLAGS  +=-C debug -g
    RECIFLAGS+=-C debug -g
  else
    FCFLAGS  +=-C hopt  #-p
    FLFLAGS  +=-C hopt 
    RECIFLAGS+=-C hopt #-p
  endif
endif

#---------------------------------------------------------------------------------------------------------------------------------#
# CRAY
#---------------------------------------------------------------------------------------------------------------------------------#
ifeq ($(findstring CRAY,$(ENVIRONMENT)),CRAY)
  ifeq ($(findstring PGI,$(ENVIRONMENT)),PGI)
    FCS=pgf90
    FCM=ftn
    PREPROC +=-DPGI
  else # Cray CCE
    FCS=ftn # ??
    FCM=ftn
    PREPROC +=-DCRAY
  endif
  CCS=cc
  CCM=cc

  ifeq ($(findstring PGI,$(ENVIRONMENT)),PGI)
    FCFLAGS    =-r8 -i4 -byteswapio -Mextend -Mpreprocess -DPGI # don't change
    FLFLAGS    =-r8 -i4 -byteswapio -Mextend # don't change
    F03STD     =-std=f2003
  else # Cray CCE
   FCFLAGS    =-eZ -F -f free -s real64 -hbyteswapio -em -J .# don't change
   FLFLAGS    =-f free -s real64 -hbyteswapio -em -J .# don't change
   F03STD     =
  endif

  ifeq ($(findstring DEBUG,$(ENVIRONMENT)),DEBUG)
    ifeq ($(findstring PGI,$(ENVIRONMENT)),PGI)
      FCFLAGS  +=-O0 -g -Minform=inform
      FLFLAGS  +=-O0 -g -Minform=inform
    else # Cray CCE
      FCFLAGS  +=-O0 -eD
      FLFLAGS  +=-O0 -eD
    endif
  else
    ifeq ($(findstring PGI,$(ENVIRONMENT)),PGI)
      FCFLAGS  +=-fast #-Mipa=fast,inline #-O2 #-fastsse #-Munroll=n:4 -Mipa=fast,inline
      FLFLAGS  +=-fast #-Mipa=fast,inline #-O2 #-fastsse #-Munroll=n:4 -Mipa=fast,inline
    else # Cray CCE
      FCFLAGS  +=-O2 -p . -rm#-O ipa5 # -O3
      FLFLAGS  +=-O2 -p . -rm#-O ipa5 # -O3
    endif
  endif
endif

#---------------------------------------------------------------------------------------------------------------------------------#
# BLUGENE P
#---------------------------------------------------------------------------------------------------------------------------------#
ifeq ($(findstring BLUEGENE,$(ENVIRONMENT)),BLUEGENE)

  # HPCT
  ifeq ($(findstring HPCT,$(ENVIRONMENT)),HPCT)
    LIBHPC_INC  = -I/bgsys/local/ihpct/include
    LIBHPC_LIBS = -L/bgsys/local/ihpct/lib/
    LIBHPC_LIB  = -lhpc -llicense /bgsys/local/ihpct/lib/fake_dlfcn.o /bgsys/local/ihpct/lib/average.o
    JUGE1_HPCT  =-DHPM,-DDYNAMIC,-DPRINT,
  endif
  
  comma:= ,
  empty:=
  space:= $(empty) $(empty)

  JUGEPREPROC = $(subst $(space),$(comma),$(PREPROC))
  PREPROC    := $(JUGEPREPROC)

  # SCALASCA
  ifeq ($(findstring SCALASCA,$(ENVIRONMENT)),SCALASCA)
    # Don't forget to do "module load UNITE;module load scalasca/1.3(rc2)"
    FCS  =scalasca -instrument bgxlf2003_r
    FCM  =scalasca -instrument mpixlf2003_r
    CCM  =scalasca -instrument mpixlc_r
  else
    FCS  =bgxlf2003_r
    FCM  =mpixlf2003_r
    CCM  =mpixlc_r
  endif

  F03STD =#-qlanglvl=2003std
  JUGE1  ='-WF,-DBLUEGENE,$(JUGE1_HPCT)
  JUGE2  ='

  FCFLAGS     = -qsuffix=cpp=f90 -qrealsize=8 -qintsize=4 -qinit #-qreport -qxflag=diagnostic
  FLFLAGS     = -qsuffix=cpp=f90 -qrealsize=8 -qintsize=4 -qinit #-qreport -qxflag=diagnostic

  ifeq ($(findstring DEBUG,$(ENVIRONMENT)),DEBUG)
    FCFLAGS  += -O0 -g -qcheck -pg
    FLFLAGS  += -O0 -g -qcheck -pg
  else
    FCFLAGS  += -O3 -d -qhot -qarch=qp -qtune=qp -qunroll=yes -qlibessl -qlist -qreport# -v
    FLFLAGS  += -O3 -d -qhot -qarch=qp -qtune=qp -qunroll=yes -qlibessl -L/bgsys/local/lib -lesslbg -qlist -qreport # -v
  endif

  # GPROF
  ifeq ($(findstring GPROF,$(ENVIRONMENT)),GPROF)
    FCFLAGS  += -g -pg
    FLFLAGS  += -g -pg
  endif
endif

#---------------------------------------------------------------------------------------------------------------------------------#

EXTERNAL_LIBS = $(HDF5_LIBS) $(SZ_LIBS) $(LIBHPC_LIBS) $(NR_LIBS) $(TECBIN_LIBS) $(BLAS_LAPACK_LIBS) $(LIBDL)
LIBDIRS       = $(HDF5_LIB) $(SZ_LIB) $(LIBHPC_LIB) $(NR_LIB) $(TECBIN_LIB) $(BLAS_LAPACK_LIB) $(OMP_LIB)
INCDIRS       = $(HDF5_INC) $(SZ_INC) $(LIBHPC_INC)
 
BOLTZPLATZ_LIB     = libboltzplatz.a


FCFLAGS += $(JUGE1)$(PREPROC)$(JUGE2) -I.
FLFLAGS += $(JUGE1)$(PREPROC)$(JUGE2)
