# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Settings
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Export the paths on new reggie2@reggie2 (no module env any more)
before_script:
  - ulimit -s unlimited
  - export PATH=/opt/openmpi/3.1.3/bin:$PATH
  - export LD_LIBRARY_PATH=/opt/openmpi/3.1.3/lib/:$LD_LIBRARY_PATH
  - export CMAKE_PREFIX_PATH=/opt/openmpi/3.1.3/share/cmake:$CMAKE_PREFIX_PATH
  - export CMAKE_LIBRARY_PATH=/opt/openmpi/3.1.3/lib:$CMAKE_LIBRARY_PATH
  - export HDF5_DIR=/opt/hdf5/1.10.5/share/cmake/
  - export PATH=/opt/hdf5/1.10.5/bin:$PATH
  - export LD_LIBRARY_PATH=/opt/hdf5/1.10.5/lib/:$LD_LIBRARY_PATH
  - export CMAKE_PREFIX_PATH=/opt/hdf5/1.10.5/:$CMAKE_PREFIX_PATH
  - export CMAKE_LIBRARY_PATH=/opt/hdf5/1.10.5/lib:$CMAKE_LIBRARY_PAT

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stages
# ----------------------------------------------------------------------------------------------------------------------------------------------------
stages:
  - build
  - reggie_checkin
  - reggie_feature_checkin
  - reggie_reservoir_nightly
  - reggie_tracking_nightly
  - reggie_superB_nightly
  - reggie_nightly
  - reggie_nightly_build_all
  - reggie_weekly
  - userguide
  - deploy

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Templates
# ----------------------------------------------------------------------------------------------------------------------------------------------------
.template: &defaults_gnu
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_gnu
  cache:
    key: "${CI_COMMIT_REF_SLUG}-GNU"
    paths:
      - build_gnu
    policy: pull

.template: &defaults_intel
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_intel
  cache:
    key: "${CI_COMMIT_REF_SLUG}-INTEL"
    paths:
      - build_intel
    policy: pull

.template: &defaults_gnu_maxwell
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_gnu_maxwell
  cache:
    key: "${CI_COMMIT_REF_SLUG}-GNU-MAX"
    paths:
      - build_gnu_maxwell
    policy: pull

.template: &defaults_intel_maxwell
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_intel_maxwell
  cache:
    key: "${CI_COMMIT_REF_SLUG}-INTEL-MAX"
    paths:
      - build_intel_maxwell
    policy: pull

.template: &defaults_gnu_poisson
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_gnu_poisson
  cache:
    key: "${CI_COMMIT_REF_SLUG}-GNU-POI"
    paths:
      - build_gnu_poisson
    policy: pull

.template: &defaults_intel_poisson
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_intel_poisson
  cache:
    key: "${CI_COMMIT_REF_SLUG}-INTEL-POI"
    paths:
      - build_intel_poisson
    policy: pull

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "build": Build with intel/gnu on check-in
# ----------------------------------------------------------------------------------------------------------------------------------------------------
build_gnu:
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_gnu
  cache:
    key: "${CI_COMMIT_REF_SLUG}-GNU"
    paths:
      - build_gnu
    policy: push
  stage: build
  script:
    - mkdir -p build_gnu ; cd build_gnu
    - git clone git@gitlab.com:reggie2.0/reggie2.0.git reggie
    - cmake .. -DPICLAS_BUILD_HDF5=OFF -DPICLAS_BUILD_POSTI=ON -DPOSTI_BUILD_SUPERB=ON ; make -j all

build_gnu_maxwell:
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_gnu_maxwell
  cache:
    key: "${CI_COMMIT_REF_SLUG}-GNU-MAX"
    paths:
      - build_gnu_maxwell
    policy: push
  stage: build
  script:
    - mkdir -p build_gnu_maxwell ; cd build_gnu_maxwell
    - git clone git@gitlab.com:reggie2.0/reggie2.0.git reggie
    - cmake .. -DPICLAS_PARTICLES=OFF -DPICLAS_BUILD_HDF5=OFF ; make -j all

build_gnu_poisson:
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_gnu_poisson
  cache:
    key: "${CI_COMMIT_REF_SLUG}-GNU-POI"
    paths:
      - build_gnu_poisson
    policy: push
  stage: build
  script:
    - mkdir -p build_gnu_poisson ; cd build_gnu_poisson
    - git clone git@gitlab.com:reggie2.0/reggie2.0.git reggie
    - cmake .. -DPICLAS_EQNSYSNAME=poisson -DPICLAS_TIMEDISCMETHOD=RK3 -DPICLAS_BUILD_HDF5=OFF ; make -j all

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_checkin": Run most simple reggie with previous builds on check-in
# ----------------------------------------------------------------------------------------------------------------------------------------------------
gnu:
  <<: *defaults_gnu
  stage: reggie_checkin
  tags:
    - withmodules-concurrent
  script:
    - cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/run_basic/maxwell -e ./bin/piclas

gnu_maxwell:
  <<: *defaults_gnu_maxwell
  stage: reggie_checkin
  tags:
    - withmodules-concurrent
  script:
    - cd build_gnu_maxwell ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_maxwell/maxwell -e ./bin/piclas

gnu_poisson:
  <<: *defaults_gnu_poisson
  stage: reggie_checkin
  tags:
    - withmodules-concurrent
  script:
    - cd build_gnu_poisson ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_poisson/poisson -e ./bin/piclas

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_feature_checkin": Run most simple reggie features with previous builds on check-in (must be very fast)
#                               - feature_PIC_gyrotron_variable_Bz: 1 cell layer gyrotron emission with variable B(z) field
#                               - feature_PIC_single_particle_PML : 4^3 cart box with a particle and 1 cell layer PMLs for all directions
# ----------------------------------------------------------------------------------------------------------------------------------------------------
gnu_PIC_maxwell_RK4:
  <<: *defaults_gnu
  stage: reggie_feature_checkin
  tags:
    - withmodules-concurrent
  script:
    - cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_PIC_maxwell_RK4 -e ./bin/piclas

gnu_PIC_maxwell_implicitBC:
  <<: *defaults_gnu
  stage: reggie_feature_checkin
  tags:
    - withmodules-concurrent
  script:
    - cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_PIC_maxwell_implicitBC

gnu_DSMC_check:
  <<: *defaults_gnu
  stage: reggie_feature_checkin
  tags:
    - withmodules-concurrent
  script:
    - cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_DSMC

gnu_BGK_check:
  <<: *defaults_gnu
  stage: reggie_feature_checkin
  tags:
    - withmodules-concurrent
  script:
    - cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_BGK

gnu_FPFlow_check:
  <<: *defaults_gnu
  stage: reggie_feature_checkin
  tags:
    - withmodules-concurrent
  script:
    - cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_FPFlow

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_chemistry_nightly": Build and run chemistry examples on nightly (check reaction rates in RESERVOIR simulation)
# ----------------------------------------------------------------------------------------------------------------------------------------------------
gnu_reservoir_nightly:
  <<: *defaults_gnu
  stage: reggie_reservoir_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu/ ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_Reservoir ; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_tracking_nightly": Build and run tracking examples on nightly
# ----------------------------------------------------------------------------------------------------------------------------------------------------
gnu_tracking:
  <<: *defaults_gnu
  stage: reggie_tracking_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu/ ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_tracking_DSMC ; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_superB_nightly": Build and run superB examples on nightly
# ----------------------------------------------------------------------------------------------------------------------------------------------------
gnu_superB_CircularCoil:
  <<: *defaults_gnu
  stage: reggie_superB_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SuperB/CircularCoil -e ./bin/piclas ; fi
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SuperB/CircularCoil -e ./bin/superB ; fi

gnu_superB_LinearConductor:
  <<: *defaults_gnu
  stage: reggie_superB_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SuperB/LinearConductor -e ./bin/piclas ; fi
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SuperB/LinearConductor -e ./bin/superB ; fi

gnu_superB_RectangularCoil:
  <<: *defaults_gnu
  stage: reggie_superB_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SuperB/RectangularCoil -e ./bin/piclas ; fi
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SuperB/RectangularCoil -e ./bin/superB ; fi

gnu_superB_SphericalMagnet:
  <<: *defaults_gnu
  stage: reggie_superB_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SuperB/SphericalMagnet -e ./bin/piclas ; fi
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SuperB/SphericalMagnet -e ./bin/superB ; fi

gnu_superB_CuboidMagnet:
  <<: *defaults_gnu
  stage: reggie_superB_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SuperB/CuboidMagnet -e ./bin/piclas ; fi
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SuperB/CuboidMagnet -e ./bin/superB ; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_nightly": Build and run
#                         - feature_PIC_single_particle/ : basic PIC test with a single particle in a cart box
#                         - test particle emission for gyrotron setup with fixed electric current of 44 A
#                         - test record points for TWT setup and compare with h5diff
#                         - h-p-convtests
#                         - feature_maxwell_dipole_cylinder_PML/ : curved cylinder geometry with PML on axis and dipole in center for testing RP output
#                         - feature_maxwell_dipole_dielectric/ : curved sphere with dielectric region in the center and dipole at near the edge
#                         - feature_maxwell_ExactFlux_PML/ : inner BC that emits a planar wave in z-direction (PMLs are placed at
#                                                            the entry and exit of the cuboid domain)
#                      examples on nightly
# ----------------------------------------------------------------------------------------------------------------------------------------------------
gnu_feature_dielectric:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then  cd build_gnu ;  python ./reggie/reggie.py ../regressioncheck/checks/NIG_dielectric ; fi

gnu_PIC_maxwell_RK4:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_maxwell_RK4/ ; fi

gnu_convtest:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ;  python ./reggie/reggie.py ../regressioncheck/checks/NIG_convtest_maxwell ; fi

gnu_convtest_t:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ;  python ./reggie/reggie.py ../regressioncheck/checks/NIG_convtest_t ; fi

gnu_convtest_poisson:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then  cd build_gnu ;  python ./reggie/reggie.py ../regressioncheck/checks/NIG_convtest_poisson ; fi

gnu_poisson_RK3:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_poisson_RK3/ ; fi

gnu_poisson_leapfrog:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_poisson_Leapfrog/ ; fi

gnu_power_density:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_poisson_powerdensity/ ; fi

gnu_maxwell_RK4:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_maxwell_RK4/ ; fi

gnu_PIC_poisson_plasma_wave:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_poisson_plasma_wave/ ; fi

gnu_maxwell_sphere_dielectric:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_maxwell_dipole_dielectric/ ; fi

gnu_PIC_poisson_implicit04:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_poisson_implicit04/ ; fi

gnu_QDS:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_QDS/ ; fi

gnu_feature_LoadBalance:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_LoadBalance/ ; fi

gnu_code_analyze:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_code_analyze/ ; fi

gnu_integer_kind8:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_IntKind8/ ; fi

gnu_PIC_deposition:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_Deposition/ ; fi

#gnu_feature_SurfaceModel:
#  <<: *defaults_gnu
#  stage: reggie_nightly
#  tags:
#    - withmodules-concurrent
#  script:
#    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SurfaceModel/ ; fi

gnu_MacroBody_check:
  <<: *defaults_gnu
  stage: reggie_nightly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_MacroBody/ ; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_nightly_build_all": Build and run
#                                    - build all specified compile options in "run_basic" with BUILD_HDF5=ON
# ----------------------------------------------------------------------------------------------------------------------------------------------------
gnu_build_all:
  <<: *defaults_gnu
  stage: reggie_nightly_build_all
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then  cd build_gnu ;  python ./reggie/reggie.py ../regressioncheck/checks/run_basic ; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_weekly": Build and run examples once a week
#                         - feature_PIC_maxwell_plasma_wave/ : test a plasma-wave with different time-integration and maxwell's equations
# ----------------------------------------------------------------------------------------------------------------------------------------------------
gnu_PIC:
  <<: *defaults_gnu
  stage: reggie_weekly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_WEEKLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/WEK_PIC_maxwell ; fi

gnu_DSMC:
  <<: *defaults_gnu
  stage: reggie_weekly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_WEEKLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/WEK_DSMC ; fi

gnu_DSMC_Reservoir:
  <<: *defaults_gnu
  stage: reggie_weekly
  tags:
    - withmodules
  script:
    - if [ -n "${DO_WEEKLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/WEK_Reservoir ; fi

gnu_FPFlow:
  <<: *defaults_gnu
  stage: reggie_weekly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_WEEKLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/WEK_FPFlow ; fi

gnu_BGKFlow:
  <<: *defaults_gnu
  stage: reggie_weekly
  tags:
    - withmodules-concurrent
  script:
    - if [ -n "${DO_WEEKLY}" ]; then cd build_gnu ; python ./reggie/reggie.py ../regressioncheck/checks/WEK_BGKFlow ; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "userguide": Compile the userguide and developer guide
# ----------------------------------------------------------------------------------------------------------------------------------------------------
userguide:
  stage: userguide
  tags:
    - withmodules-concurrent
  script:
    - cd doc/userguide ; make; cd ../..
    - cd doc/developerguide ; make; cd ../..
    #- if [ -n "${DO_DEPLOY}" ]; then scp -r userguide flexi@euler:~/homepage/. ; fi
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - doc/userguide
      - doc/developerguide

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "github": Push the master branch to github
# ----------------------------------------------------------------------------------------------------------------------------------------------------
github:
  stage: deploy
  tags:
    - withmodules-concurrent
  script:
    - if [ -z "${DO_DEPLOY}" ]; then exit ; fi
    - rm -rf piclas_github || true ;
    - git clone -b master --single-branch git@gitlab.com:piclas/piclas.git piclas_github ;
    - cd piclas_github ;
##    - git checkout --orphan orphan_branch v1.0.0 ; # tag v1.0.0 points to f754d8e1e207cb959a81bfb9013bc0f12476c62b
##    - git commit -m 'truncated history before v1.0.0' ;
##    - git rebase --onto orphan_branch v1.0.0 master ;
##    - git branch -D orphan_branch ;
    - git remote add piclas-framework git@github.com:piclas-framework/piclas.git ;
    - git push --force --follow-tags piclas-framework master ;
#    - git push --mirror git@gitlab.com:iagcopple/piclas-framework.git ; cd ../
