# Settings
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Load modules on new boltzplatz reggie
before_script:
  - ulimit -s unlimited
  - module purge
  - module load cmake
  - module load gcc/9.2.0
  - module load openmpi/3.1.6/gcc/9.2.0
  - module load hdf5/1.10.6/gcc/9.2.0/openmpi/3.1.6
  - if [ -n "${DO_CORE_SPLIT}" ]; then 
      echo " PICLAS_SPLIT_TYPE=OMPI_COMM_TYPE_CORE\nSplitting shared memory domains on processor-level!";
      export PICLAS_SPLIT_TYPE=OMPI_COMM_TYPE_CORE;
    else 
      echo "Splitting shared memory domains on node-level! Set variable DO_CORE_SPLIT=T to force core-level shared memory splitting for all regression tests.";
    fi
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stages
# ----------------------------------------------------------------------------------------------------------------------------------------------------
stages:
  - build
  - reggie_checkin
  - reggie_feature_checkin
  - reggie_DSMC_nightly
#  - reggie_bgk_nightly
  - reggie_tools_nightly
  - reggie_nightly
  - reggie_nightly_build_all
  - reggie_weekly
  - userguide
  - deploy

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Templates
# ----------------------------------------------------------------------------------------------------------------------------------------------------
.template: &defaults
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
      - build
    policy: pull
  allow_failure: true
  rules:
    - if: '$DO_CHECKIN'
    - if: '$CI_PIPELINE_SOURCE == "push"'

.template: &defaults_nightly
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
      - build
    policy: pull
  allow_failure: true
  rules:
    - if: '$DO_NIGHTLY'

.template: &defaults_weekly
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
      - build
    policy: pull
  allow_failure: true
  rules:
    - if: '$DO_WEEKLY'

.template: &defaults_maxwell
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_maxwell
  cache:
    key: "${CI_COMMIT_REF_SLUG}-MAX"
    paths:
      - build_maxwell
    policy: pull
  allow_failure: true
  rules:
    - if: '$DO_CHECKIN'
    - if: '$CI_PIPELINE_SOURCE == "push"'

.template: &defaults_poisson
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_poisson_release
      - build_poisson_debug
  cache:
    key: "${CI_COMMIT_REF_SLUG}-POI"
    paths:
      - build_poisson_release
      - build_poisson_debug
    policy: pull
  allow_failure: true
  rules:
    - if: '$DO_CHECKIN'
    - if: '$CI_PIPELINE_SOURCE == "push"'
    
.template: &defaults_poisson_nightly
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_poisson_release
      - build_poisson_debug
  cache:
    key: "${CI_COMMIT_REF_SLUG}-POI"
    paths:
      - build_poisson_release
      - build_poisson_debug
    policy: pull
  allow_failure: true
  rules:
    - if: '$DO_NIGHTLY'

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "build": Build on check-in
# ----------------------------------------------------------------------------------------------------------------------------------------------------
build:
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
      - build
    policy: push
  stage: build
  script:
    - mkdir -p build ; cd build
    - git clone git@gitlab.com:reggie2.0/reggie2.0.git reggie
    - cmake .. -DPICLAS_BUILD_HDF5=OFF -DPICLAS_BUILD_POSTI=ON -DPOSTI_BUILD_SUPERB=ON -DPICLAS_READIN_CONSTANTS=ON ; make -j all

build_maxwell:
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_maxwell
  cache:
    key: "${CI_COMMIT_REF_SLUG}-MAX"
    paths:
      - build_maxwell
    policy: push
  stage: build
  script:
    - mkdir -p build_maxwell ; cd build_maxwell
    - git clone git@gitlab.com:reggie2.0/reggie2.0.git reggie
    - cmake .. -DPICLAS_DEBUG_MEMORY=ON -DPICLAS_PARTICLES=OFF -DPICLAS_BUILD_HDF5=OFF -DPICLAS_READIN_CONSTANTS=ON ; make -j all

build_poisson:
  tags:
    - withmodules-concurrent
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - build_poisson_release
      - build_poisson_debug
  cache:
    key: "${CI_COMMIT_REF_SLUG}-POI"
    paths:
      - build_poisson_release
      - build_poisson_debug
    policy: push
  stage: build
  script:
    - mkdir -p build_poisson_release ; cd build_poisson_release
    - git clone git@gitlab.com:reggie2.0/reggie2.0.git reggie
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DPICLAS_EQNSYSNAME=poisson -DPICLAS_CODE_ANALYZE=ON -DPICLAS_TIMEDISCMETHOD=RK3 -DPICLAS_BUILD_HDF5=OFF ; make -j all
    - cd ..
    - mkdir -p build_poisson_debug ; cd build_poisson_debug
    - git clone git@gitlab.com:reggie2.0/reggie2.0.git reggie
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DPICLAS_EQNSYSNAME=poisson -DPICLAS_CODE_ANALYZE=ON -DPICLAS_TIMEDISCMETHOD=RK3 -DPICLAS_BUILD_HDF5=OFF ; make -j all

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_checkin": Run most simple reggie with previous builds on check-in
# ----------------------------------------------------------------------------------------------------------------------------------------------------
default:
  <<: *defaults
  stage: reggie_checkin
  script:
    - cd build ; python ./reggie/reggie.py ../regressioncheck/checks/run_basic/maxwell -e ./bin/piclas

maxwell:
  <<: *defaults_maxwell
  stage: reggie_checkin
  script:
    - cd build_maxwell ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_maxwell/maxwell -e ./bin/piclas

poisson:
  <<: *defaults_poisson
  stage: reggie_checkin
  script:
    - cd build_poisson_release ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_poisson/poisson -e ./bin/piclas
    - cd ../build_poisson_debug ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_poisson/poisson -e ./bin/piclas

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_feature_checkin": Run most simple reggie features with previous builds on check-in (must be very fast)
#                               - feature_PIC_gyrotron_variable_Bz: 1 cell layer gyrotron emission with variable B(z) field
#                               - feature_PIC_single_particle_PML : 4^3 cart box with a particle and 1 cell layer PMLs for all directions
# ----------------------------------------------------------------------------------------------------------------------------------------------------
CHE_PIC_maxwell_RK4:
  <<: *defaults
  stage: reggie_feature_checkin
  script:
    - cd build ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_PIC_maxwell_RK4 -e ./bin/piclas

      # Commented out 07/12/2020 - to be fixed (this reggie fails due to bug in implicit particle tracking)
      #CHE_PIC_maxwell_implicitBC:
      #  <<: *defaults
      #  stage: reggie_feature_checkin
      #  script:
      #    - cd build ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_PIC_maxwell_implicitBC

CHE_DSMC:
  <<: *defaults
  stage: reggie_feature_checkin
  script:
    - cd build ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_DSMC

CHE_BGK:
  <<: *defaults
  stage: reggie_feature_checkin
  script:
    - cd build ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_BGK

CHE_FPFlow:
  <<: *defaults
  stage: reggie_feature_checkin
  script:
    - cd build ; python ./reggie/reggie.py ../regressioncheck/checks/CHE_FPFlow

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_DSMC_nightly": Build and run chemistry examples on nightly (check reaction rates in RESERVOIR simulation)
# ----------------------------------------------------------------------------------------------------------------------------------------------------
NIG_Reservoir:
  <<: *defaults_nightly
  stage: reggie_DSMC_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build/ ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_Reservoir ; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_DSMC_nightly": Build and run tracking examples on nightly
# ----------------------------------------------------------------------------------------------------------------------------------------------------
NIG_Tracking:
  <<: *defaults_nightly
  stage: reggie_DSMC_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build/ ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_tracking_DSMC ; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_DSMC_nightly": Build and run DSMC examples on nightly
# ----------------------------------------------------------------------------------------------------------------------------------------------------
NIG_DSMC:
  <<: *defaults_nightly
  stage: reggie_DSMC_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build/ ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_DSMC ; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_tools_nightly": Build and run superB and piclas2vtk examples on nightly
# ----------------------------------------------------------------------------------------------------------------------------------------------------
NIG_SuperB_piclas:
  <<: *defaults_nightly
  stage: reggie_tools_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SuperB -e ./bin/piclas ; fi

NIG_SuperB_standalone:
  <<: *defaults_nightly
  stage: reggie_tools_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SuperB -e ./bin/superB ; fi

NIG_piclas2vtk:
  <<: *defaults_nightly
  stage: reggie_tools_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_piclas2vtk ; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_bgk_nightly": Build and run BGK-Flow examples on nightly (CURRENTLY NO NIGHTLY TEST FOR BGK)
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# gnu_NIG_BGK-Flow:
#   <<: *defaults_nightly
#   stage: reggie_bgk_nightly
#   tags:
#     - withmodules-concurrent
#   script:
#     - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_BGK-Flow ; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_nightly": Build and run
#                         - feature_PIC_single_particle/ : basic PIC test with a single particle in a cart box
#                         - test particle emission for gyrotron setup with fixed electric current of 44 A
#                         - test record points for TWT setup and compare with h5diff
#                         - h-p-convtests
#                         - feature_maxwell_dipole_cylinder_PML/ : curved cylinder geometry with PML on axis and dipole in center for testing RP output
#                         - feature_maxwell_dipole_dielectric/ : curved sphere with dielectric region in the center and dipole at near the edge
#                         - feature_maxwell_ExactFlux_PML/ : inner BC that emits a planar wave in z-direction (PMLs are placed at
#                                                            the entry and exit of the cuboid domain)
#                      examples on nightly
# ----------------------------------------------------------------------------------------------------------------------------------------------------
NIG_dielectric:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then  cd build ;  python ./reggie/reggie.py ../regressioncheck/checks/NIG_dielectric ; fi

NIG_PIC_maxwell_RK4:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_maxwell_RK4/ ; fi

NIG_convtest_maxwell:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ;  python ./reggie/reggie.py ../regressioncheck/checks/NIG_convtest_maxwell ; fi

NIG_convtest_t_maxwell:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ;  python ./reggie/reggie.py ../regressioncheck/checks/NIG_convtest_t_maxwell ; fi

NIG_convtest_t_poisson:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ;  python ./reggie/reggie.py ../regressioncheck/checks/NIG_convtest_t_poisson ; fi

NIG_convtest_poisson:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ;  python ./reggie/reggie.py ../regressioncheck/checks/NIG_convtest_poisson ; fi

NIG_PIC_poisson_RK3:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_poisson_RK3/ ; fi

NIG_PIC_poisson_Leapfrog:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_poisson_Leapfrog/ ; fi

      # NIG_PIC_poisson_Leapfrog_not_working:
      #   <<: *defaults_nightly
      #   stage: reggie_nightly
      #   script:
      #     - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_poisson_Leapfrog_not_working/ ; fi

      # Crank-Nicolson (2nd order implicit) time integration
      # NIG_PIC_poisson_powerdensity:
      #   <<: *defaults_nightly
      #   stage: reggie_nightly
      #   script:
      #     - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_poisson_powerdensity/ ; fi

NIG_poisson:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_poisson/ ; fi

NIG_maxwell_RK4:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_maxwell_RK4/ ; fi

NIG_PIC_poisson_plasma_wave:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_poisson_plasma_wave/ ; fi

NIG_maxwell_dipole_dielectric:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_maxwell_dipole_dielectric/ ; fi

      # Commented out 07/12/2020 - to be fixed: 
      # this reggie has two examples:
      #  - imexfluid (fails): differnces as compared with the ref. files because particles are lost
      #  - surface_flux (works): no problems detected
      #NIG_PIC_poisson_implicit04:
      #  <<: *defaults_nightly
      #  stage: reggie_nightly
      #  script:
      #    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_poisson_implicit04/ ; fi

NIG_LoadBalance:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_LoadBalance/ ; fi

NIG_code_analyze:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_code_analyze/ ; fi

NIG_IntKind8:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_IntKind8/ ; fi

NIG_PIC_Deposition:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_PIC_Deposition/ ; fi

# Add surf model (SEE) 13% probabilty test case here
#feature_SurfaceModel:
#  <<: *defaults_nightly
#  stage: reggie_nightly
#  tags:
#    - withmodules-concurrent
#  script:
#    - if [ -n "${DO_NIGHTLY}" ]; then cd build ; python ./reggie/reggie.py ../regressioncheck/checks/NIG_SurfaceModel/ ; fi

NIG_Photoionization_release:
  <<: *defaults_poisson_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_poisson_release ; fi
    - if [ -n "${DO_NIGHTLY}" ]; then python ./reggie/reggie.py ../regressioncheck/checks/NIG_Photoionization/volume_emission -e ./bin/piclas ; fi
    - if [ -n "${DO_NIGHTLY}" ]; then python ./reggie/reggie.py ../regressioncheck/checks/NIG_Photoionization/surface_emission -e ./bin/piclas ; fi

NIG_Photoionization_debug:
  <<: *defaults_poisson_nightly
  stage: reggie_nightly
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then cd build_poisson_debug ; fi
    - if [ -n "${DO_NIGHTLY}" ]; then python ./reggie/reggie.py ../regressioncheck/checks/NIG_Photoionization/volume_emission -e ./bin/piclas ; fi
    - if [ -n "${DO_NIGHTLY}" ]; then python ./reggie/reggie.py ../regressioncheck/checks/NIG_Photoionization/surface_emission -e ./bin/piclas ; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_nightly_build_all": Build and run
#                                    - build all specified compile options in "run_basic" with BUILD_HDF5=ON
# ----------------------------------------------------------------------------------------------------------------------------------------------------
build_all:
  <<: *defaults_nightly
  stage: reggie_nightly_build_all
  script:
    - if [ -n "${DO_NIGHTLY}" ]; then  cd build ;  python ./reggie/reggie.py ../regressioncheck/checks/run_basic ; fi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_weekly": Build and run examples once a week
#                         - feature_PIC_maxwell_plasma_wave/ : test a plasma-wave with different time-integration and maxwell's equations
# ----------------------------------------------------------------------------------------------------------------------------------------------------
WEK_PIC_maxwell:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - python ./reggie/reggie.py ../regressioncheck/checks/WEK_PIC_maxwell

WEK_DSMC:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - python ./reggie/reggie.py ../regressioncheck/checks/WEK_DSMC

WEK_Reservoir:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - python ./reggie/reggie.py ../regressioncheck/checks/WEK_Reservoir

WEK_FPFlow:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - python ./reggie/reggie.py ../regressioncheck/checks/WEK_FPFlow

WEK_BGKFlow:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - python ./reggie/reggie.py ../regressioncheck/checks/WEK_BGKFlow

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "userguide": Compile the userguide and developer guide
# ----------------------------------------------------------------------------------------------------------------------------------------------------
userguide:
  stage: userguide
  tags:
    - withmodules-concurrent
  script:
    - cd doc/userguide ; make; cd ../..
    - cd doc/developerguide ; make; cd ../..
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
    paths:
      - doc/userguide
      - doc/developerguide

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "github": Push the master branch to github
# ----------------------------------------------------------------------------------------------------------------------------------------------------
github:
  stage: deploy
  tags:
    - withmodules-concurrent
  rules:
    - if: '$DO_DEPLOY'
  script:
    - if [ -z "${DO_DEPLOY}" ]; then exit ; fi
    - rm -rf piclas_github || true ;
    - git clone -b master --single-branch git@gitlab.com:piclas/piclas.git piclas_github ;
    - cd piclas_github ;
##    - git checkout --orphan orphan_branch v1.0.0 ; # tag v1.0.0 points to f754d8e1e207cb959a81bfb9013bc0f12476c62b
##    - git commit -m 'truncated history before v1.0.0' ;
##    - git rebase --onto orphan_branch v1.0.0 master ;
##    - git branch -D orphan_branch ;
    - git remote add piclas-framework git@github.com:piclas-framework/piclas.git ;
    - git push --force --follow-tags piclas-framework master ;
#    - git push --mirror git@gitlab.com:iagcopple/piclas-framework.git ; cd ../
